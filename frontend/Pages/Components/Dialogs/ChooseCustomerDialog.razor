@using frontend.Data.Contracts
@using frontend.Helpers
@using frontend.Models
<MudDialog Style="min-width: 1240px;min-height:720px">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            Customers
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (Customers == null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        }
        else
        {
            <MudDataGrid T="Customer" MultiSelection="true" Items="@Customers" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                         Height="720px">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Cutomers</MudText>
                    <MudSpacer />
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="Customer" />
                    <PropertyColumn Property="x => x.FirstName" Title="First Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.LastName" Title="Last Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Email" SortBy="@_sortBy" Sortable="true" Filterable="true" />

                    <PropertyColumn Property="x => x.Phone" Title="Phone" Sortable="true" Filterable="true" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>

                             <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="()=>Select(context.Item)">Select</MudButton>
                         </MudStack>
                     </CellTemplate>
                 </TemplateColumn>
             </Columns>
             <PagerContent>
                 <MudDataGridPager T="Customer" />
             </PagerContent>
         </MudDataGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
       
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }


  
 
    private void Cancel()
    {

        MudDialog.Cancel();
    }

    [Inject]
    public ICustomerRepo CustomerRepo { get; set; }
    [Inject]
    public IDialogService DialogService { get; set; }

    public IEnumerable<Customer> Customers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Customers = await CustomerRepo.GetAllCustomers();
    }

    private string _searchString;
    private string _search;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Customer, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FirstName.Length;
        else
            return x.FirstName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Customer, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;



        return false;
    };
   void Select(Customer customer)
    {
        MudDialog.Close(DialogResult.Ok(customer));
     
    }
   


}
