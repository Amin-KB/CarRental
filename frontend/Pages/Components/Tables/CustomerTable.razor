@using frontend.Data
@using frontend.Data.Contracts
@using frontend.Models
@using frontend.Pages.Components.Dialogs


@if (Customers == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudDataGrid T="Customer" MultiSelection="true" Items="@Customers" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
         Height="720px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Cutomers</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Secondary" aria-label="add" OnClick="AddCustomer"></MudIconButton>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Customer" />
            <PropertyColumn Property="x => x.FirstName" Title="First Name" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.LastName" Title="Last Name" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.Email" SortBy="@_sortBy" Sortable="true" Filterable="true" />

            <PropertyColumn Property="x => x.Phone" Title="Phone" Sortable="true" Filterable="true" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>

                     <MudButton Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Primary" OnClick="()=>DetailAndEditCustomerDialog(context.Item)">Details/Edit</MudButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Customer" />
        </PagerContent>
    </MudDataGrid>
}




@code {

    #region Inject

    [Inject]
    public ICustomerRepo CustomerRepo { get; set; }
    [Inject]
    public IDialogService DialogService { get; set; }

    #endregion

    #region Properties and Fields

    public IEnumerable<Customer> Customers { get; set; }
    private string _searchString;
    private string _search;
    private bool _sortNameByLength;
    private List<string> _events = new();
    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        Customers = await CustomerRepo.GetAllCustomers();
    }

 
    // custom sort by name length
    private Func<Customer, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FirstName.Length;
        else
            return x.FirstName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Customer, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;



        return false;
    };


    async Task AddCustomer()
    {
        var parameters = new DialogParameters<CreateCustomerDialog>();
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog =await DialogService.ShowAsync<CreateCustomerDialog>("Add Customer", parameters,options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Customers = await CustomerRepo.GetAllCustomers();
            StateHasChanged();
        }
    }
    async void DetailAndEditCustomerDialog(Customer customer)
    {
        var parameters = new DialogParameters<CustomerDetailsDialog> { { x => x.Customer, customer } };
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CustomerDetailsDialog>("Edit and Detail Customer", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Customers = await CustomerRepo.GetAllCustomers();
            StateHasChanged();
        }
    }

    #endregion
    
}