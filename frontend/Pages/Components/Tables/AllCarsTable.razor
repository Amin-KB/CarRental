@using frontend.Data
@using frontend.Data.Contracts
@using frontend.Models
@using frontend.Pages.Components.Dialogs


@if (Cars == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
        <CustomGraphics>
            <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="#727cf5" font-family="Helvetica" font-size="2">Rented: @data[0].ToString()</text>
            <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="#727cf5" font-family="Helvetica" font-size="2">Available: @data[1].ToString()</text>
        </CustomGraphics>
    </MudChart>
    <MudDataGrid T="Car" MultiSelection="true" Items="@Cars" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Height="720px" Class="my-7">
        <ToolBarContent>
            <MudText Typo="Typo.h6">All Cars</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Secondary" aria-label="add" OnClick="AddCar"></MudIconButton>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Car" />
            <PropertyColumn Property="x => x.CarId" Title="Car Id" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.Make" Title="Brand" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.Model" Title="Model" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.Year" Title="Year" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.Mileage" Title="Mileage (K)"  Sortable="true" Filterable="true" />
     
            <TemplateColumn CellClass="d-flex justify-center" Filterable="false">
                <CellTemplate>
                    <MudStack Row>
                     
                    @if (context.Item.RentalStatus == false)
                    {
                        <MudChip Color="Color.Success">Available</MudChip>
                            <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.CarRental" Color="Color.Secondary" OnClick="()=>Rent(context.Item.CarId)">Rent</MudButton>
                    }
                    else
                    {
                        <MudChip Color="Color.Error">Rented</MudChip>
                            <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.CarRental" Disabled Color="Color.Secondary">Rent</MudButton>
                    }

                        <MudButton Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Primary" OnClick="()=>CarRentalHistoryDialog(context.Item)">Rent History</MudButton>
                    </MudStack>
             </CellTemplate>
         </TemplateColumn>
     </Columns>
     <PagerContent>
         <MudDataGridPager T="Car" />
     </PagerContent>
 </MudDataGrid>
 
}




@code {
    [Inject]
    public ICarsRepo CarRepo { get; set; }
    [Inject]
    public IDialogService DialogService { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    public IEnumerable<Car> Cars { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cars = await CarRepo.GetAllCarsAsync();
        data[0] = Cars.Where(x => x.RentalStatus == true).Count();
        data[1] = Cars.Where(x => x.RentalStatus == false).Count();
    }
    double rentedCarCount = 0;
    double availableCarCount = 0;
    public double[] data = { 0, 0 };
    public string[] labels = { "Rented", "Available" };
    private string _searchString;
    private string _search;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Customer, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FirstName.Length;
        else
            return x.FirstName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Car, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Make.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Make.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;



        return false;
    };




    void Rent(int carId)
    {
        NavigationManager.NavigateTo($"/car/rent/{carId}");
    }
    async Task AddCar()
    {
        var parameters = new DialogParameters<CreateCarDialog>();
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CreateCarDialog>("Add Car", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Cars = await CarRepo.GetAllCarsAsync();
            StateHasChanged();
        }
    }
    async void CarRentalHistoryDialog(Car car)
    {
        var parameters = new DialogParameters<CarRentalHistoryDialog> { { x => x.Car, car } };
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CarRentalHistoryDialog>("Rental History", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
           
            StateHasChanged();
        }
    }
}